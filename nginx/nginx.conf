#这是注释

worker_processes      4;
worker_cpu_affinity   0001 0010 0100 1000;
worker_rlimit_nofile  1000000;

events {
  use epoll;
  worker_connections 100000;
}

http {
  include                 mime.types;
  default_type            application/json;
  access_log              off;
  sendfile                off;
  keepalive_timeout       60;
  gzip                    off;
  #下面两个配置项用于吐chunked二进制流
  client_body_buffer_size 4M;
  client_max_body_size    100M;
  
  server {
    listen        60000;
    server_name   100.100.29.132;
    charset       utf-8;
    
    location = / {
      echo "{\"message\":\"For test, you known!\"}";
    }
    
    location = /a {
      alias /opt/a/a.json;
    }
    
    location = /b {
      lua_need_request_body on;
      content_by_lua_block {
        local file = io.open("/opt/b/b.json", "r")
        local content = file:read("*a")
        file:close()
        ngx.print(content)
      }
    }
    
    location = /c {
      lua_need_request_body on;
      content_by_lua_block {
        package.path = "/opt/dkjson.lua"
        local json = require("dkjson")
        ngx.req.read_body()
        local data = ngx.req.get_body_data()
        local obj,pos,err = json.decode(data, 1, nil)
        if err then
          ngx.say(err)
        else
          if (obj.order.timestamp = -1) then
            local file = io.open("/opt/c/c1.json", "r")
            local content = file:read("*a")
            file:close()
            ngx.print(content)
          elseif (obj.order.timestamp > 10) then
            local file = io.open("/opt/c/c2.json", "r")
            local content = file:read("*a")
            file:close()
            ngx.print(content)
          end
      }
    }
  }
}
