#这是注释

#CPU核数
worker_processes      4;
#CPU亲和绑定，可以提升nginx性能
worker_cpu_affinity   0001 0010 0100 1000;
#可以打开文件的最大数目
worker_rlimit_nofile  1000000;

events {
  use epoll;
  #最大连接数
  worker_connections 100000;
}

http {
  include                 mime.types;
  default_type            application/json;
  access_log              off;
  sendfile                off;
  keepalive_timeout       60;
  gzip                    off;
  #下面两个配置项用于吐chunked二进制流
  client_body_buffer_size 4M;
  client_max_body_size    100M;
  
  server {
    listen        60000;
    server_name   100.100.29.132;
    charset       utf-8;
    
    location = / {
      echo "{\"message\":\"For test, you known!\"}";
    }
    
    #吐本地json文件方式1
    location = /a {
      alias /opt/a/a.json;
    }
    
    #吐本地json文件方式2
    location = /b {
      #lua_need_request_body on的作用是强制接受请求消息体
      #如果客户端使用100 continue，服务器会自动返回100 continue
      lua_need_request_body on;
      content_by_lua_block {
        local file = io.open("/opt/b/b.json", "r")
        local content = file:read("*a")
        file:close()
        ngx.print(content)
      }
    }
    
    location = /c {
      lua_need_request_body on;
      content_by_lua_block {
        --使用dkjson解析请求消息体中的json
        package.path = "/opt/dkjson.lua"
        local json = require("dkjson")
        --读取请求消息
        ngx.req.read_body()
        --抽取请求消息体
        local data = ngx.req.get_body_data()
        --解析请求消息体的json格式
        local obj,pos,err = json.decode(data, 1, nil)
        if err then
          ngx.say(err)
        else
          --请求消息体为 {"order":{"timestamp":123456}}
          if (obj.order.timestamp = -1) then
            local file = io.open("/opt/c/c1.json", "r")
            local content = file:read("*a")
            file:close()
            ngx.print(content)
          elseif (obj.order.timestamp > 10) then
            local file = io.open("/opt/c/c2.json", "r")
            local content = file:read("*a")
            file:close()
            ngx.print(content)
          end
      }
    }
    
    location = /d {
      lua_need_request_body on;
      content_by_lua_block {
        --获取请求的http method（GET/POST/PUT/DELETE/...）
        local method = ngx.var.request_method
        if (method == "GET") then
          local file = io.open("/opt/d/d1.json", "r")
          local content = file:read("*a")
          file:close()
          ngx.print(content)
        elseif (method == "POST") then
          local file = io.open("/opt/d/d2.json", "r")
          local content = file:read("*a")
          file:close()
          ngx.print(content)
        else
          ngx.say("{\"status\":\"1001\",\"message\":\"http method is not supported\"}")
        end
      }
    }
    
    location ~ ^/e {
      lua_need_request_body on;
      content_by_lua_block {
        --获取URI参数，举例 http://192.168.1.1:8080/query?method=login&&a=1，需要获取method和a的值
        local args = ngx.req.get_uri_args()
        if (args.method == "login") then
          --有些POST请求，既有URI参数，又带消息体，此时就需要获取消息体
          --如果不对消息体中的内容判断，那就是仅仅为了返回100 continue
          ngx.req.read_body()
          local file = io.open("/opt/e/e1.json", "r")
          local content = file:read("*a")
          file:close()
          ngx.print(content)
        elseif (args.method == "inquiry") then
          ngx.req.read_body()
          --有些POST的消息体，不是json格式，而是用的key=value型
          --消息体举例：timeStart=123456&&timeEnd=234567，需要将其中参数的值解析出来
          local arg = ngx.req.get_post_args()
          local t1 = tonumber(arg['timeStart'])
          local t2 = tonumber(arg['timeEnd'])
      }
    }
  }
}
